  /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template
 */
package ejercicio6_11;

import java.util.Scanner;

/**Se dispone de la siguiente relacion de letras:
 * Conjunto 1: e i k m p q r s t u v
 * Conjunto 2: p v i u m t e r k q s
 * 
 * Con ella es posible codificar texto, convirtiendo cada letra del conjunto 1 en
 * su correspondiente del conjunto 2. El resto de las letras no se modifican. Los
 * conjuntos se utilizan tanto para codificar mayúsculas como minúsculas, mostrando
 * siempre la codificación en minúsculas.
 * 
 * Un ejemplo: la palabra PaquiTo se codifica como matqvko.
 * Realizar un programa que codifique un texto. Para ello implementar la siguiente
 * función:         char codifica (char conjunto1[], char conjunto2[], char c){
 *que devuelve el caracter c codificado segun los conjuntos 1 y 2 que se le pasan.
 * @author JAVA
 */
public class Ejercicio6_11 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        final char conjunto1[] = {'e', 'i', 'k', 'm', 'p', 'q', 'r', 's', 't', 'u', 'v'};
        final char conjunto2[] = {'p', 'v', 'i', 'u', 'm', 't', 'e', 'r', 'k', 'q', 's'};
        
        char codificado[];
        String texto;
        System.out.print("introduzca el texto a codificar: ");
        texto = sc.nextLine();
        texto = texto.toLowerCase();
        codificado = new char[texto.length()];
        
        for (int i = 0; i < texto.length(); i++) {
            codificado[i] = codifica(conjunto1, conjunto2, texto.charAt(i));
        }
        texto = String.valueOf(codificado);
        System.out.println(texto);
        
    }

    public static char codifica(char[] conjunto1, char[] conjunto2, char c) {
        final String conj1 = String.valueOf(conjunto1);
        char codificado;
        int pos = conj1.indexOf(c);
        
        if(pos == -1){
            codificado = c;
        }else{
            codificado = conjunto2[pos];
        }
                return codificado;
        
    }
    
}